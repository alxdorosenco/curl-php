<?php

namespace AlxDorosenco\CurlPhp\Tests\Unit\Traits;

use AlxDorosenco\CurlPhp\Curl;
use AlxDorosenco\CurlPhp\CurlOpts;
use AlxDorosenco\CurlPhp\Traits\TCurlFunctions;
use PHPUnit\Framework\TestCase;

class TCurlFunctionsTest extends TestCase
{
    private $trait;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->trait = new class {
            use TCurlFunctions;

            public false|\CurlHandle $handle;

            public function __construct(){
                $this->handle = curl_init();
            }
        };
    }

    public function tearDown(): void
    {
        curl_close($this->trait->handle);

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public static function pauseConstantsProvider(): array
    {
        return [
            [CURLPAUSE_ALL],
            [CURLPAUSE_CONT],
            [CURLPAUSE_RECV],
            [CURLPAUSE_SEND],
            [CURLPAUSE_RECV_CONT],
            [CURLPAUSE_SEND_CONT]
        ];
    }

    public static function errorCodeConstantsProvider(): array
    {
        return [
            [CURLE_OK],
            [CURLE_UNSUPPORTED_PROTOCOL],
            [CURLE_FAILED_INIT],
            [CURLE_URL_MALFORMAT],
            [CURLE_COULDNT_RESOLVE_HOST],
            [CURLE_COULDNT_RESOLVE_PROXY]
        ];
    }

    public function testCloseMethod(): void
    {
        $this->expectNotToPerformAssertions();

        $this->trait->close();
    }

    public function testCopyHandleMethod(): void
    {
        $this->assertIsObject($this->trait->copyHandle());
        $this->assertSame(Curl::class, get_class($this->trait->copyHandle()));
    }

    public function testErrNoMethod(): void
    {
        $this->assertIsString($this->trait->errNo());
    }

    public function testErrorMethod(): void
    {
        $this->assertIsString($this->trait->error());
    }

    public function testEscapeMethod(): void
    {
        $location = $this->trait->escape('Hofbr채uhaus / M체nchen');

        $this->assertIsString($this->trait->escape('Hofbr채uhaus / M체nchen'));
        $this->assertEquals('Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen', $location);
    }

    public function testExecMethod(): void
    {
        $this->assertIsBool($this->trait->exec());
    }

    public function testGetInfoMethod(): void
    {
        $this->assertIsArray($this->trait->getInfo());
    }

    public function testInitMethod(): void
    {
        $init = $this->trait->init();

        $this->assertIsObject($init);
        $this->assertSame(\CurlHandle::class, get_class($init));
    }

    /**
     * @dataProvider pauseConstantsProvider
     */
    public function testPauseMethod(int $value): void
    {
        $this->assertIsInt($this->trait->pause($value));
    }

    public function testResetMethod(): void
    {
        $this->expectNotToPerformAssertions();

        $this->trait->reset();
    }

    public function testOptArrayMethod(): void
    {
        $optsArray = $this->trait->setOptArray(
            CurlOpts::instance()
                ->setHeader()
                ->setReturnTransfer()
                ->toArray()
        );

        $this->assertIsBool($optsArray);
    }

    public function testSetOptMethod(): void
    {
        $opt = $this->trait->setOpt(CURLOPT_RETURNTRANSFER, true);

        $this->assertIsBool($opt);
    }

    /**
     * @dataProvider errorCodeConstantsProvider
     */
    public function testStrErrorMethod(int $value): void
    {
        $this->assertIsString($this->trait->strError($value));
    }

    public function testUnescapeMethod(): void
    {
        $effective_url = $this->trait->getInfo(CURLINFO_EFFECTIVE_URL);
        $effective_url_decoded = $this->trait->unescape($effective_url);

        $this->assertIsString($effective_url_decoded);
    }

    public function testVersionMethod(): void
    {
        $this->assertIsArray($this->trait->version());
    }
}